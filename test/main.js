"use strict";
var index_1 = require('../index');
var chai = require('chai');
var expect = chai.expect;
var networking;
before(function (done) {
    this.timeout(15000);
    index_1.default().then(function (data) {
        networking = data;
        done();
    }).catch(function (err) {
        console.log("error", err);
        done();
    });
});
describe("netw object", function () {
    it("should return an object", function () {
        expect(networking).to.be.ok;
    });
    it("contains an array of networks", function () {
        expect(networking).to.be.an('array');
    });
    describe("network entry", function () {
        it("network structure contains interface, type and mac", function () {
            for (var i = 0; i < networking.length; i++) {
                expect(networking[i]).to.have.property('interface').to.be.a('string');
                expect(networking[i]).to.have.property('type').to.be.a('string');
                expect(networking[i]).to.have.property('mac').to.be.a('string');
            }
        });
        it("validate type of interface for API compatibility", function () {
            var options = ['wifi', 'wired', 'virtual'];
            for (var i = 0; i < networking.length; i++) {
                expect(options).to.include(networking[i].type);
            }
        });
        describe("wifi property (if wifi device is present on your computer", function () {
            it("wifi networks scan", function () {
                for (var i = 0; i < networking.length; i++) {
                    if (networking[i].type === 'wifi') {
                        expect(networking[i]).to.have.property('scan').to.be.an('array');
                    }
                }
            });
            it("check essid if present", function () {
                for (var i = 0; i < networking.length; i++) {
                    if (networking[i].type === 'wifi' && networking[i].gateway && networking[i].essid) {
                        expect(networking[i]).to.have.property('essid').to.be.a('string');
                    }
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7b0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNyRSxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDekIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7d0JBQ2hGLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDdEUsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFUCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5ldHcgZnJvbSAnLi4vaW5kZXgnXG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gJ2NoYWknXG5cblxuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5sZXQgbmV0d29ya2luZztcblxuXG4gICAgYmVmb3JlKGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQoMTUwMDApO1xuXG4gICAgICAgIG5ldHcoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBuZXR3b3JraW5nID0gZGF0YVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIixlcnIpXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuLy8gd3JpdGUgdGVzdHMgYWJvdXQgbXVsdGlwbGUgdmFsdWVzICgyIGlwIG9yIDIgZ2F0ZXdheSBmb3IgdGhlIHNhbWUgaW50ZXJmYWNlKVxuZGVzY3JpYmUoXCJuZXR3IG9iamVjdFwiLCBmdW5jdGlvbiAoKSB7XG5cblxuXG5cbiAgICBpdChcInNob3VsZCByZXR1cm4gYW4gb2JqZWN0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmcpLnRvLmJlLm9rO1xuICAgIH0pO1xuXG4gICAgaXQoXCJjb250YWlucyBhbiBhcnJheSBvZiBuZXR3b3Jrc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdChuZXR3b3JraW5nKS50by5iZS5hbignYXJyYXknKTtcbiAgICB9KTtcblxuXG5cbiAgICBkZXNjcmliZShcIm5ldHdvcmsgZW50cnlcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGl0KFwibmV0d29yayBzdHJ1Y3R1cmUgY29udGFpbnMgaW50ZXJmYWNlLCB0eXBlIGFuZCBtYWNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXR3b3JraW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ2ludGVyZmFjZScpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChuZXR3b3JraW5nW2ldKS50by5oYXZlLnByb3BlcnR5KCd0eXBlJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ21hYycpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInZhbGlkYXRlIHR5cGUgb2YgaW50ZXJmYWNlIGZvciBBUEkgY29tcGF0aWJpbGl0eVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IFsnd2lmaScsICd3aXJlZCcsICd2aXJ0dWFsJ107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ldHdvcmtpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBleHBlY3Qob3B0aW9ucykudG8uaW5jbHVkZShuZXR3b3JraW5nW2ldLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZShcIndpZmkgcHJvcGVydHkgKGlmIHdpZmkgZGV2aWNlIGlzIHByZXNlbnQgb24geW91ciBjb21wdXRlclwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGl0KFwid2lmaSBuZXR3b3JrcyBzY2FuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ldHdvcmtpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtpbmdbaV0udHlwZSA9PT0gJ3dpZmknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobmV0d29ya2luZ1tpXSkudG8uaGF2ZS5wcm9wZXJ0eSgnc2NhbicpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwiY2hlY2sgZXNzaWQgaWYgcHJlc2VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXR3b3JraW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXR3b3JraW5nW2ldLnR5cGUgPT09ICd3aWZpJyAmJiBuZXR3b3JraW5nW2ldLmdhdGV3YXkgJiYgbmV0d29ya2luZ1tpXS5lc3NpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ2Vzc2lkJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59KTtcbiJdfQ==
