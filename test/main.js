"use strict";
var index_1 = require('../index');
var chai = require('chai');
var expect = chai.expect;
var networking;
before(function (done) {
    this.timeout(15000);
    index_1.default().then(function (data) {
        networking = data;
        done();
    }).catch(function (err) {
        console.log("error", err);
        done();
    });
});
describe("netw object", function () {
    it("should return an object", function () {
        expect(networking).to.be.ok;
    });
    it("contains an array of networks", function () {
        expect(networking).to.be.an('array');
    });
    describe("network entry", function () {
        it("network structure contains interface, type and mac", function () {
            for (var i = 0; i < networking.length; i++) {
                expect(networking[i]).to.have.property('interface').to.be.a('string');
                expect(networking[i]).to.have.property('type').to.be.a('string');
                expect(networking[i]).to.have.property('mac').to.be.a('string');
                var options = ['wifi', 'wired'];
                expect(options).to.include(networking[i].type);
            }
        });
        it("validate type of interface for API compatibility", function () {
            var options = ['wifi', 'wired'];
            for (var i = 0; i < networking.length; i++) {
                expect(options).to.include(networking[i].type);
            }
        });
        describe("wifi property (if wifi device is present on your computer", function () {
            it("wifi networks scan", function () {
                for (var i = 0; i < networking.length; i++) {
                    if (networking[i].type == 'wifi') {
                        expect(networking[i]).to.have.property('scan').to.be.an('array');
                    }
                }
            });
            it("check essid if present", function () {
                for (var i = 0; i < networking.length; i++) {
                    if (networking[i].type == 'wifi' && networking[i].gateway && networking[i].essid) {
                        expect(networking[i]).to.have.property('essid').to.be.a('string');
                    }
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmV0dyBmcm9tICcuLi9pbmRleCdcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSAnY2hhaSdcblxuXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcbmxldCBuZXR3b3JraW5nO1xuXG5cbiAgICBiZWZvcmUoZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHRoaXMudGltZW91dCgxNTAwMCk7XG5cbiAgICAgICAgbmV0dygpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIG5ldHdvcmtpbmcgPSBkYXRhXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvclwiLGVycilcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuXG4vLyB3cml0ZSB0ZXN0cyBhYm91dCBtdWx0aXBsZSB2YWx1ZXMgKDIgaXAgb3IgMiBnYXRld2F5IGZvciB0aGUgc2FtZSBpbnRlcmZhY2UpXG5kZXNjcmliZShcIm5ldHcgb2JqZWN0XCIsIGZ1bmN0aW9uICgpIHtcblxuXG5cblxuICAgIGl0KFwic2hvdWxkIHJldHVybiBhbiBvYmplY3RcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QobmV0d29ya2luZykudG8uYmUub2s7XG4gICAgfSk7XG5cbiAgICBpdChcImNvbnRhaW5zIGFuIGFycmF5IG9mIG5ldHdvcmtzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmcpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG5cblxuICAgIGRlc2NyaWJlKFwibmV0d29yayBlbnRyeVwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgaXQoXCJuZXR3b3JrIHN0cnVjdHVyZSBjb250YWlucyBpbnRlcmZhY2UsIHR5cGUgYW5kIG1hY1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ldHdvcmtpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBleHBlY3QobmV0d29ya2luZ1tpXSkudG8uaGF2ZS5wcm9wZXJ0eSgnaW50ZXJmYWNlJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ3R5cGUnKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QobmV0d29ya2luZ1tpXSkudG8uaGF2ZS5wcm9wZXJ0eSgnbWFjJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBbJ3dpZmknLCAnd2lyZWQnXTtcbiAgICAgICAgICAgICAgICBleHBlY3Qob3B0aW9ucykudG8uaW5jbHVkZShuZXR3b3JraW5nW2ldLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInZhbGlkYXRlIHR5cGUgb2YgaW50ZXJmYWNlIGZvciBBUEkgY29tcGF0aWJpbGl0eVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IFsnd2lmaScsICd3aXJlZCddO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXR3b3JraW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG9wdGlvbnMpLnRvLmluY2x1ZGUobmV0d29ya2luZ1tpXS50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoXCJ3aWZpIHByb3BlcnR5IChpZiB3aWZpIGRldmljZSBpcyBwcmVzZW50IG9uIHlvdXIgY29tcHV0ZXJcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBpdChcIndpZmkgbmV0d29ya3Mgc2NhblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXR3b3JraW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXR3b3JraW5nW2ldLnR5cGUgPT0gJ3dpZmknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobmV0d29ya2luZ1tpXSkudG8uaGF2ZS5wcm9wZXJ0eSgnc2NhbicpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwiY2hlY2sgZXNzaWQgaWYgcHJlc2VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXR3b3JraW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXR3b3JraW5nW2ldLnR5cGUgPT0gJ3dpZmknICYmIG5ldHdvcmtpbmdbaV0uZ2F0ZXdheSAmJiBuZXR3b3JraW5nW2ldLmVzc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobmV0d29ya2luZ1tpXSkudG8uaGF2ZS5wcm9wZXJ0eSgnZXNzaWQnKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn0pO1xuIl19
