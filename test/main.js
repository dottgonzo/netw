"use strict";
var index_1 = require('../lib/index');
var chai = require('chai');
var expect = chai.expect;
var networking;
before(function (done) {
    this.timeout(15000);
    index_1.default().then(function (data) {
        networking = data;
        done();
    }).catch(function (err) {
        console.log("error", err);
        done();
    });
});
describe("netw object", function () {
    it("should return an object", function () {
        expect(networking).to.be.ok;
    });
    it("contains an array of networks", function () {
        expect(networking).to.be.an('array');
    });
    describe("network entry", function () {
        it("network structure contains interface, type and mac", function () {
            for (var i = 0; i < networking.length; i++) {
                expect(networking[i]).to.have.property('interface').to.be.a('string');
                expect(networking[i]).to.have.property('type').to.be.a('string');
                expect(networking[i]).to.have.property('mac').to.be.a('string');
                var options = ['wifi', 'wired'];
                expect(options).to.include(networking[i].type);
            }
        });
        it("validate type of interface for API compatibility", function () {
            var options = ['wifi', 'wired'];
            for (var i = 0; i < networking.length; i++) {
                expect(options).to.include(networking[i].type);
            }
        });
        describe("wifi property (if wifi device is present on your computer", function () {
            it("wifi networks scan", function () {
                for (var i = 0; i < networking.length; i++) {
                    if (networking[i].type == 'wifi') {
                        expect(networking[i]).to.have.property('scan').to.be.an('array');
                    }
                }
            });
            it("check essid if present", function () {
                for (var i = 0; i < networking.length; i++) {
                    if (networking[i].type == 'wifi' && networking[i].gateway, networking[i].essid) {
                        expect(networking[i]).to.have.property('essid').to.be.a('string');
                    }
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmV0dyBmcm9tICcuLi9saWIvaW5kZXgnXG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gJ2NoYWknXG5cblxuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5sZXQgbmV0d29ya2luZztcblxuXG4gICAgYmVmb3JlKGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQoMTUwMDApO1xuXG4gICAgICAgIG5ldHcoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBuZXR3b3JraW5nID0gZGF0YVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIixlcnIpXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuLy8gd3JpdGUgdGVzdHMgYWJvdXQgbXVsdGlwbGUgdmFsdWVzICgyIGlwIG9yIDIgZ2F0ZXdheSBmb3IgdGhlIHNhbWUgaW50ZXJmYWNlKVxuZGVzY3JpYmUoXCJuZXR3IG9iamVjdFwiLCBmdW5jdGlvbiAoKSB7XG5cblxuXG5cbiAgICBpdChcInNob3VsZCByZXR1cm4gYW4gb2JqZWN0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmcpLnRvLmJlLm9rO1xuICAgIH0pO1xuXG4gICAgaXQoXCJjb250YWlucyBhbiBhcnJheSBvZiBuZXR3b3Jrc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdChuZXR3b3JraW5nKS50by5iZS5hbignYXJyYXknKTtcbiAgICB9KTtcblxuXG5cbiAgICBkZXNjcmliZShcIm5ldHdvcmsgZW50cnlcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGl0KFwibmV0d29yayBzdHJ1Y3R1cmUgY29udGFpbnMgaW50ZXJmYWNlLCB0eXBlIGFuZCBtYWNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXR3b3JraW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ2ludGVyZmFjZScpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChuZXR3b3JraW5nW2ldKS50by5oYXZlLnByb3BlcnR5KCd0eXBlJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ21hYycpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gWyd3aWZpJywgJ3dpcmVkJ107XG4gICAgICAgICAgICAgICAgZXhwZWN0KG9wdGlvbnMpLnRvLmluY2x1ZGUobmV0d29ya2luZ1tpXS50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJ2YWxpZGF0ZSB0eXBlIG9mIGludGVyZmFjZSBmb3IgQVBJIGNvbXBhdGliaWxpdHlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBbJ3dpZmknLCAnd2lyZWQnXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV0d29ya2luZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGV4cGVjdChvcHRpb25zKS50by5pbmNsdWRlKG5ldHdvcmtpbmdbaV0udHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKFwid2lmaSBwcm9wZXJ0eSAoaWYgd2lmaSBkZXZpY2UgaXMgcHJlc2VudCBvbiB5b3VyIGNvbXB1dGVyXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaXQoXCJ3aWZpIG5ldHdvcmtzIHNjYW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV0d29ya2luZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV0d29ya2luZ1tpXS50eXBlID09ICd3aWZpJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG5ldHdvcmtpbmdbaV0pLnRvLmhhdmUucHJvcGVydHkoJ3NjYW4nKS50by5iZS5hbignYXJyYXknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcImNoZWNrIGVzc2lkIGlmIHByZXNlbnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV0d29ya2luZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV0d29ya2luZ1tpXS50eXBlID09ICd3aWZpJyAmJiBuZXR3b3JraW5nW2ldLmdhdGV3YXksIG5ldHdvcmtpbmdbaV0uZXNzaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChuZXR3b3JraW5nW2ldKS50by5oYXZlLnByb3BlcnR5KCdlc3NpZCcpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufSk7XG4iXX0=
