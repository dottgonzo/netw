var child_process = require("child_process");
var Promise = require("bluebird");
module.exports = function (e) {
    return new Promise(function (resolve, reject) {
        var callbacked = false;
        var timo = setTimeout(function () {
            if (!callbacked) {
                reject("timeout error");
            }
        }, 50000);
        child_process.exec(__dirname + "/../scripts/linux/network.sh", function (error, stdout, stderr) {
            callbacked = true;
            clearTimeout(timo);
            if (error && error !== null) {
                reject(error);
            }
            else if (stderr) {
                reject(stderr);
            }
            else {
                resolve(JSON.parse(stdout + ""));
            }
        });
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFZLGFBQWEsV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUMvQyxJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUdwQyxpQkFBUyxVQUFTLENBQU87SUFFckIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFLE1BQU07UUFDL0IsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBR25CLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQztZQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2pDLENBQUM7UUFDTCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFHVCxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyw4QkFBOEIsRUFDekQsVUFBUyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU07WUFDMUIsVUFBVSxHQUFDLElBQUksQ0FBQztZQUNoQixZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEIsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbkIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ25DLENBQUM7UUFFTCxDQUFDLENBQUMsQ0FBQztJQUlYLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoaWxkX3Byb2Nlc3MgZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSBcImJsdWViaXJkXCI7XG5cblxuZXhwb3J0ID0gZnVuY3Rpb24oZTogdm9pZCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGxldCBjYWxsYmFja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1vID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwidGltZW91dCBlcnJvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNTAwMDApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgY2hpbGRfcHJvY2Vzcy5leGVjKF9fZGlybmFtZSArIFwiLy4uL3NjcmlwdHMvbGludXgvbmV0d29yay5zaFwiLFxuICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tlZD10cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1vKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0ZGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qoc3RkZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2Uoc3Rkb3V0K1wiXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG5cblxuICAgIH0pO1xufTtcblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
